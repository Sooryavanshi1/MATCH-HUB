# we use rest client VS code extension for testing
# which is quite basic 
# since it is my first time testing an API
# use '###' to separate a request from others
# click on 'send request' on top of every request to send it
# Installation steps provided in documentation
# we must give a space between 'Content-Type' and the json payload
# the ids used in the url will be different for your system

### For creating a new match
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// click on send request
POST http://localhost:3000/matches
Content-Type: application/json

{
    "team1_Name" : "Chennai Super Kings",
    "team2_Name" : "Mumbai Indians",
    "team1_Composition" : ["M.S. Dhoni","Ravidarsinh Jadeja", "Suresh Raina","Tushar Deshpande","Devon Conway"],
    "team2_Composition" : ["Rohit Sharma", "Dewald Brevis", "Suryakumar Yadav", "Ishan Kishan" , "N. Tilak Varma"],
    "match_date" : "16-06-2001",
    //I am using DD-MM-YYYY format in string format
    //It should be maintained through out the project
    "venue": "Mumbai",
    "palyer_of_the_match": "Not declared yet",
    "winning_team": "Not declared yet",
    "losing_team":"Not declared yet"
}
// we must give a space between the Content-type and json payload

###(we use '###' to separate requests)

// adding another match
//click on send request

POST http://localhost:3000/matches
Content-Type: application/json

{
    "team1_Name" : "KingsXI Punjab",
    "team2_Name" : "Rajasthan Royals",
    "team1_Composition" : ["Shikhar. Dhawan","Atharva. Taide","Bhanuka. Rajapaksa","Harpreet. Singh","Shahrukh. Khan"],
    "team2_Composition" : ["Sanju Samson","Devdutt Padikkal","Jos Buttler","Shimron Hetmyer","Yashasvi Jaiswal"],
    "match_date" : "16-06-2001",
    "venue": "Mohali",
    "palyer_of_the_match": "Not declared yet",
    "winning_team": "Not declared yet",
    "losing_team":"Not declared yet"
}
###
// adding another match of a different date

POST http://localhost:3000/matches
Content-Type: application/json

{
    "team1_Name" : "Royal Challengers Bangalore",
    "team2_Name" : "Lucknow Super Giants",
    "team1_Composition" : ["Faf du Plessis", "Akash Deep", "Anuj Rawat", "Avinash Singh", "David Willey"],
    "team2_Composition" : ["Avesh Khan",  "Mark Wood",  "Mayank Yadav", "Mohsin Khan", "Ravi Bishno"],
    "match_date" : "17-06-2001",
    "venue": "Lucknow",
    "palyer_of_the_match": "Not declared yet",
    "winning_team": "Not declared yet",
    "losing_team":"Not declared yet"
}

###
// checking the validation error handeling by removing one of the required fields
//click on 'send request' to get the error in response
POST http://localhost:3000/matches
Content-Type: application/json

{
    "team1_Name" : "Royal Challengers Bangalore",
    "team2_Name" : "Lucknow Super Giants",
    "team1_Composition" : ["Faf du Plessis", "Akash Deep", "Anuj Rawat", "Avinash Singh", "David Willey"],
    "team2_Composition" : ["Avesh Khan",  "Mark Wood",  "Mayank Yadav", "Mohsin Khan", "Ravi Bishno"],
    "match_date" : "",
    "venue": "Lucknow",
    "palyer_of_the_match": "Not declared yet",
    "winning_team": "Not declared yet",
    "losing_team":"Not declared yet"
}
###
// you can add your own tests by copying the above fromat



// creating a match tests ended
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// getting all matches by date
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// we are using query strings to get matches by date
###
GET http://localhost:3000/matches?match_date=16-06-2001

###
// creating another query strings

GET  http://localhost:3000/matches?match_date=17-06-2001

###
// using a date that is not inside the collection
 
GET http://localhost:3000/matches?match_date=18-06-2001

### 
// using a date with wrong format

GET http://localhost:3000/matches?match_date=2001-06-16

### 
// you can make your own test cases by following the above format and adding more matches as you please


//getting matches by date tests ended
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//getting all the matches details
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
###
GET http://localhost:3000/matches/all
//getting all the matches details tests ended
###
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//getting a match's details
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// we will be using the '_id' generated by MongoDB 
// which is unique, for fetching the details about a particular match
// inorder to get the id of the match, we first get the id of all the matches
GET http://localhost:3000/matches/all

//now we copy the '_id' of the particular match 
//and paste it to the end of the url
// example
### the id that I have passed here belongs to my Database's Collection
### it won't work on your system
### use the above get request to get an appropriate id
GET http://localhost:3000/matches/64c88c49e61eea424be76e76

###

//for a search request with id that is not present
GET http://localhost:3000/matches/64c770c86b029a8bce3b5a91

###

//for an invalid id

GET http://localhost:3000/matches/64c770c86b029a8bce3b5a9
###

// you can make your own test cases by following the format


//getting a particular match details tests ended
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//to delete a particular match by id
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GET http://localhost:3000/matches/all/

###
//now we delete it by using the id
DELETE http://localhost:3000/matches/64c88c51e61eea424be76e78

###
//now we again check the entire collection to see if this actually works
GET http://localhost:3000/matches/all/

###
// now we try to delete a match that is already not present or has been deleted
DELETE http://localhost:3000/matches/64c88c51e61eea424be76e78
###
//Deleting a  match tests ended
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//updating the results of the match
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// first we need the id of the match to be updated
GET http://localhost:3000/matches/all
### now we use the id of the match to update

PATCH http://localhost:3000/matches/64c88c49e61eea424be76e76
Content-Type: application/json

{
    "winning_team":"Chennai Super Kings",
    "losing_team":"Mumbai Indians"

}
###
// now we provide a team name that did not played as the winner

PATCH http://localhost:3000/matches/64c88c49e61eea424be76e76
Content-Type: application/json

{
    "winning_team":"Royal Challengers bangalore",
    "losing_team":"Mumbai Indians"
}
###
// now we provide a team name that did not played as the loser

PATCH http://localhost:3000/matches/64c88c49e61eea424be76e76
Content-Type: application/json

{
    "winning_team":"Chennai Super Kings",
    "losing_team":"Royal Challengers Bangalore"
}
###
// now we leave the fields empty

PATCH http://localhost:3000/matches/64c770c86b029a8bce3b5a90
Content-Type: application/json

{
    "winning_team":"",
    "losing_team":""

}
###
// tests for updating the match results done
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//updating player of match
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// get a match id first that needs to be updated
###
GET http://localhost:3000/matches/all

###
// now we update player of the match

PATCH http://localhost:3000/matches/pl/64c88c49e61eea424be76e76
Content-Type: application/json

{
    "palyer_of_the_match": "M.S. Dhoni"
}
###
// now we try to update the player of the match 
// of a match that has not been played yet
// get the id of a team that has not played yet
PATCH http://localhost:3000/matches/pl/64c88c51e61eea424be76e78
Content-Type: application/json

{
    "palyer_of_the_match": "Shikhar. Dhawan"
}

###
// now we try to make a player of the match
//that is not in the winning team
PATCH http://localhost:3000/matches/pl/64c88c49e61eea424be76e76
Content-Type: application/json

{
    "palyer_of_the_match": "Shikhar. Dhawan"
}
###
// updating player of the match tests done
///////////////////////////////////////////////////////////////////////////////////////////////////////////////



//getting a teams performance till now
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//we add '/performance' in our url for the route
//then we add the name of the team at the end and use '%' for spaces

//we use a team name that has played matche(s) to test
###
GET http://localhost:3000/matches/performance/Chennai%20Super%20Kings
###

//now we use a team that is yet to play a match
GET http://localhost:3000/matches/performance/Royal%20Challengers%20Bangalore

###
//tests for player of the match ended
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

